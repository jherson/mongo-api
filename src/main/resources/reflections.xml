<?xml version="1.0" encoding="UTF-8"?>

<Reflections>
  <MethodAnnotationsScanner>
    <entry>
      <key>javax.enterprise.inject.Produces</key>
      <values>
        <value>com.rhcloud.mongo.impl.DocumentManagerFactoryImpl.createDocumentManagerFactory(javax.enterprise.inject.spi.InjectionPoint)</value>
      </values>
    </entry>
  </MethodAnnotationsScanner>
  <TypeElementsScanner>
    <entry>
      <key>com.rhcloud.mongo.exception.MongoDBConfigurationException</key>
      <values>
        <value>com.rhcloud.mongo.exception.MongoDBConfigurationException</value>
        <value>serialVersionUID</value>
        <value>&lt;init&gt;()</value>
        <value>&lt;init&gt;(java.lang.Exception)</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.Query</key>
      <values>
        <value>com.rhcloud.mongo.Query</value>
        <value>field(java.lang.String)</value>
        <value>isEqual(java.lang.Object)</value>
        <value>getSingleResult()</value>
        <value>getResultList()</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.qualifier.Provider</key>
      <values>
        <value>com.rhcloud.mongo.qualifier.Provider</value>
        <value>OPENSHIFT</value>
        <value>MONGOLAB</value>
        <value>$VALUES</value>
        <value>values()</value>
        <value>valueOf(java.lang.String)</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.Datastore</key>
      <values>
        <value>com.rhcloud.mongo.Datastore</value>
        <value>serialVersionUID</value>
        <value>log</value>
        <value>documentManagerFactory</value>
        <value>&lt;init&gt;()</value>
        <value>createDocumentManagerFactory()</value>
        <value>createDocumentManagerFactory(java.util.Properties)</value>
        <value>createDocumentManagerFactory(com.rhcloud.mongo.DatastoreConfig)</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.model.BaseDocument</key>
      <values>
        <value>com.rhcloud.mongo.model.BaseDocument</value>
        <value>serialVersionUID</value>
        <value>gson</value>
        <value>id</value>
        <value>&lt;init&gt;()</value>
        <value>&lt;init&gt;(java.lang.String)</value>
        <value>&lt;init&gt;(com.mongodb.DBObject)</value>
        <value>getId()</value>
        <value>setId(org.bson.types.ObjectId)</value>
        <value>getAsJSON()</value>
        <value>getAsDBObject()</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.adapter.ObjectIdTypeAdapter</key>
      <values>
        <value>com.rhcloud.mongo.adapter.ObjectIdTypeAdapter</value>
        <value>&lt;init&gt;()</value>
        <value>deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)</value>
        <value>serialize(org.bson.types.ObjectId, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)</value>
        <value>serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)</value>
        <value>deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.spi.AnnotationScanner</key>
      <values>
        <value>com.rhcloud.mongo.spi.AnnotationScanner</value>
        <value>log</value>
        <value>cache</value>
        <value>&lt;init&gt;()</value>
        <value>startScan()</value>
        <value>startScan(javax.servlet.ServletContext)</value>
        <value>getCollectionName(java.lang.Object)</value>
        <value>getCollectionName(java.lang.Class)</value>
        <value>getId(java.lang.Object)</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.impl.DocumentManagerFactoryImpl</key>
      <values>
        <value>com.rhcloud.mongo.impl.DocumentManagerFactoryImpl</value>
        <value>serialVersionUID</value>
        <value>mongo</value>
        <value>db</value>
        <value>isOpen</value>
        <value>&lt;init&gt;(com.mongodb.MongoClient, com.mongodb.DB)</value>
        <value>&lt;init&gt;(com.rhcloud.mongo.DatastoreConfig)</value>
        <value>&lt;init&gt;(java.util.Properties)</value>
        <value>createDocumentManagerFactory(javax.enterprise.inject.spi.InjectionPoint)</value>
        <value>createDocumentManager()</value>
        <value>close()</value>
        <value>isOpen()</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.spi.MongoDBActivator</key>
      <values>
        <value>com.rhcloud.mongo.spi.MongoDBActivator</value>
        <value>log</value>
        <value>&lt;init&gt;()</value>
        <value>contextInitialized(javax.servlet.ServletContextEvent)</value>
        <value>contextDestroyed(javax.servlet.ServletContextEvent)</value>
        <value>@javax.servlet.annotation.WebListener</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.annotation.Document</key>
      <values>
        <value>com.rhcloud.mongo.annotation.Document</value>
        <value>collection()</value>
        <value>@java.lang.annotation.Retention</value>
        <value>@java.lang.annotation.Target</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.DatastoreConfig</key>
      <values>
        <value>com.rhcloud.mongo.DatastoreConfig</value>
        <value>serialVersionUID</value>
        <value>host</value>
        <value>database</value>
        <value>port</value>
        <value>username</value>
        <value>password</value>
        <value>readPreference</value>
        <value>&lt;init&gt;()</value>
        <value>getHost()</value>
        <value>setHost(java.lang.String)</value>
        <value>getDatabase()</value>
        <value>setDatabase(java.lang.String)</value>
        <value>getPort()</value>
        <value>setPort(int)</value>
        <value>getUsername()</value>
        <value>setUsername(java.lang.String)</value>
        <value>getPassword()</value>
        <value>setPassword(java.lang.String)</value>
        <value>getReadPreference()</value>
        <value>setReadPreference(com.mongodb.ReadPreference)</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.DocumentManager</key>
      <values>
        <value>com.rhcloud.mongo.DocumentManager</value>
        <value>setDB(com.mongodb.DB)</value>
        <value>insert(java.lang.Class, java.lang.Object)</value>
        <value>update(java.lang.Class, java.lang.Object)</value>
        <value>delete(java.lang.Class, java.lang.Object)</value>
        <value>delete(java.lang.Object)</value>
        <value>deleteAll(java.lang.Class)</value>
        <value>find(java.lang.Class, org.bson.types.ObjectId)</value>
        <value>createQuery(java.lang.Class)</value>
        <value>close()</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.adapter.DateTypeAdapter</key>
      <values>
        <value>com.rhcloud.mongo.adapter.DateTypeAdapter</value>
        <value>ISO_8061_FORMAT</value>
        <value>&lt;init&gt;()</value>
        <value>deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)</value>
        <value>serialize(java.util.Date, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)</value>
        <value>serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)</value>
        <value>deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.DocumentManagerFactory</key>
      <values>
        <value>com.rhcloud.mongo.DocumentManagerFactory</value>
        <value>createDocumentManager()</value>
        <value>isOpen()</value>
        <value>close()</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.spi.AnnotationCache</key>
      <values>
        <value>com.rhcloud.mongo.spi.AnnotationCache</value>
        <value>serialVersionUID</value>
        <value>collectionMap</value>
        <value>&lt;init&gt;()</value>
        <value>addCollection(java.lang.Class, java.lang.String)</value>
        <value>resolveCollection(java.lang.Class)</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.annotation.Id</key>
      <values>
        <value>com.rhcloud.mongo.annotation.Id</value>
        <value>@java.lang.annotation.Retention</value>
        <value>@java.lang.annotation.Target</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.impl.QueryImpl</key>
      <values>
        <value>com.rhcloud.mongo.impl.QueryImpl</value>
        <value>documentManager</value>
        <value>clazz</value>
        <value>queryBuilder</value>
        <value>field(java.lang.String)</value>
        <value>isEqual(java.lang.Object)</value>
        <value>getSingleResult()</value>
        <value>getResultList()</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.qualifier.MongoDBDatastore</key>
      <values>
        <value>com.rhcloud.mongo.qualifier.MongoDBDatastore</value>
        <value>provider()</value>
        <value>@javax.enterprise.context.ApplicationScoped</value>
        <value>@javax.enterprise.inject.Stereotype</value>
        <value>@java.lang.annotation.Target</value>
        <value>@java.lang.annotation.Retention</value>
        <value>@java.lang.annotation.Documented</value>
      </values>
    </entry>
    <entry>
      <key>com.rhcloud.mongo.impl.DocumentManagerImpl</key>
      <values>
        <value>com.rhcloud.mongo.impl.DocumentManagerImpl</value>
        <value>serialVersionUID</value>
        <value>gson</value>
        <value>mapper</value>
        <value>mongo</value>
        <value>db</value>
        <value>setDB(com.mongodb.DB)</value>
        <value>insert(java.lang.Class, java.lang.Object)</value>
        <value>update(java.lang.Class, java.lang.Object)</value>
        <value>find(java.lang.Class, org.bson.types.ObjectId)</value>
        <value>delete(java.lang.Class, java.lang.Object)</value>
        <value>delete(java.lang.Object)</value>
        <value>deleteAll(java.lang.Class)</value>
        <value>createQuery(java.lang.Class)</value>
        <value>close()</value>
      </values>
    </entry>
  </TypeElementsScanner>
  <TypeAnnotationsScanner>
    <entry>
      <key>java.lang.annotation.Target</key>
      <values>
        <value>com.rhcloud.mongo.qualifier.MongoDBDatastore</value>
        <value>com.rhcloud.mongo.annotation.Id</value>
        <value>com.rhcloud.mongo.annotation.Document</value>
      </values>
    </entry>
    <entry>
      <key>javax.enterprise.inject.Stereotype</key>
      <values>
        <value>com.rhcloud.mongo.qualifier.MongoDBDatastore</value>
      </values>
    </entry>
    <entry>
      <key>java.lang.annotation.Retention</key>
      <values>
        <value>com.rhcloud.mongo.qualifier.MongoDBDatastore</value>
        <value>com.rhcloud.mongo.annotation.Id</value>
        <value>com.rhcloud.mongo.annotation.Document</value>
      </values>
    </entry>
    <entry>
      <key>java.lang.annotation.Documented</key>
      <values>
        <value>com.rhcloud.mongo.qualifier.MongoDBDatastore</value>
      </values>
    </entry>
    <entry>
      <key>javax.enterprise.context.ApplicationScoped</key>
      <values>
        <value>com.rhcloud.mongo.qualifier.MongoDBDatastore</value>
      </values>
    </entry>
    <entry>
      <key>javax.servlet.annotation.WebListener</key>
      <values>
        <value>com.rhcloud.mongo.spi.MongoDBActivator</value>
      </values>
    </entry>
  </TypeAnnotationsScanner>
</Reflections>
